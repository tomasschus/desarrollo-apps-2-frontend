name: Build & Deploy

on:
  push:
    tags:
      - 'v*'

jobs:
  # 📋 Job 1: Información del release
  release-info:
    name: 📋 Release Info
    runs-on: ubuntu-latest
    outputs:
      version: ${{ github.ref_name }}
      commit: ${{ github.sha }}
      actor: ${{ github.actor }}
    steps:
      - name: Show release info
        run: |
          echo "🚀 Deployando versión: ${{ github.ref_name }}"
          echo "📝 Commit: ${{ github.sha }}"
          echo "👤 Autor: ${{ github.actor }}"

  # 🧪 Job 2: Tests (opcional, puede ejecutarse en paralelo con build)
  # test:
  #   name: 🧪 Run Tests
  #   runs-on: ubuntu-latest
  #   needs: release-info
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v4

  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 22
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     # - name: Run tests
  #     #   run: npm test

  #     - name: Run linting
  #       run: npm run lint --if-present

  # 🏗️ Job 3: Build de la aplicación
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: release-info
    environment: production
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build app
        env:
          # Variables de entorno no sensibles (desde Environment Variables)
          VITE_API_BASE_URL: ${{ vars.VITE_API_BASE_URL }}
          VITE_N8N_API_BASE_URL: ${{ vars.VITE_N8N_API_BASE_URL }}
          VITE_GRAPHHOPPER_URL: ${{ vars.VITE_GRAPHHOPPER_URL }}
          # Variables sensibles (desde Secrets)
          VITE_GRAPHHOPPER_API_KEY: ${{ secrets.VITE_GRAPHHOPPER_API_KEY }}
        run: npm run build

      # 📦 Subir los archivos built como artifact
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            dist/
            Dockerfile.production
            captain-definition
            nginx.conf
          retention-days: 1

  # 🚀 Job 4: Deploy a CapRover
  deploy:
    name: 🚀 Deploy to CapRover
    runs-on: ubuntu-latest
    needs: [build]
    environment: production
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: deploy-package/

      - name: Prepare files for CapRover
        run: |
          # Renombrar Dockerfile.production a Dockerfile para CapRover
          mv deploy-package/Dockerfile.production deploy-package/Dockerfile

          echo "📁 Archivos preparados para CapRover:"
          ls -la deploy-package/

      - name: Create deploy.tar for CapRover
        run: |
          # Crear deploy.tar en la raíz (nombre exacto que busca la acción)
          tar -C deploy-package -cf deploy.tar .

          echo "📦 Contenido del deploy.tar:"
          tar -tvf deploy.tar
          echo "📏 Tamaño del tar:"
          ls -lh deploy.tar

      - name: Deploy to CapRover
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: ${{ secrets.CAPROVER_SERVER }}
          app: ${{ secrets.APP_NAME }}
          token: ${{ secrets.APP_TOKEN }}
